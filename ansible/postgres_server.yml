---
- name: Install and Deploy PostgreSQL
  hosts: servers
  become: true

  vars:
    POSTGRES_USER: "username"
    POSTGRES_PASSWORD: "password"
    POSTGRES_DB: "postgres"
    PGDATA: "/data/postgres"
    POSTGRES_VERSION: "12"
    BACKUP_DIR: "/data/postgres_backup"
    test_case: "store" # tpcc | store

  tasks:
    - name: Install required packages
      apt:
        name: "postgresql-{{ POSTGRES_VERSION }}"
        state: present
        update_cache: yes

    - name: Ensure data directory exists with correct permissions
      file:
        path: "{{ PGDATA }}"
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Stop PostgreSQL service
      service:
        name: "postgresql@{{ POSTGRES_VERSION }}-main"
        state: stopped

    - name: Update PostgreSQL environment configuration
      lineinfile:
        path: "/etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf"
        regexp: '^data_directory'
        line: "data_directory = '{{ PGDATA }}'"
      notify:
        - Restart PostgreSQL

    - name: Set max connections to 1000
      lineinfile:
        path: "/etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf"
        regexp: '^#?max_connections'
        line: "max_connections = 1000"
        state: present
      notify:
        - Restart PostgreSQL

    - name: Set default isolation level to READ UNCOMMITTED
      lineinfile:
        path: "/etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf"
        regexp: '^#?default_transaction_isolation'
        line: "default_transaction_isolation = 'read uncommitted'"
        state: present
      notify:
        - Restart PostgreSQL

    - name: Initialize PostgreSQL database in custom directory
      command: "sudo -u postgres /usr/lib/postgresql/{{ POSTGRES_VERSION }}/bin/initdb -D {{ PGDATA }}"
      args:
        creates: "{{ PGDATA }}/PG_VERSION"

    - name: Start PostgreSQL service
      service:
        name: "postgresql@{{ POSTGRES_VERSION }}-main"
        state: started

    - name: Configure PostgreSQL to accept connections and set up users
      block:
#        - name: Create database
#          command: "sudo -u postgres createdb {{ POSTGRES_DB }}"
#          args:
#            creates: "/var/lib/postgresql/{{ POSTGRES_VERSION }}/main/base/{{ POSTGRES_DB }}"

        - name: Revoke privileges and drop user if exists
          block:
            - name: Revoke privileges and drop user if exists
              block:
                - name: Check if user exists
                  command: "sudo -u postgres psql -tAc \"SELECT 1 FROM pg_roles WHERE rolname='{{ POSTGRES_USER }}';\""
                  register: user_check
                  changed_when: false

                - name: Revoke privileges from user if exists
                  command: "sudo -u postgres psql -c \"REVOKE ALL PRIVILEGES ON DATABASE {{ POSTGRES_DB }} FROM \"{{ POSTGRES_USER }}\";\""
                  when: user_check.stdout == '1'

                - name: Drop user if exists
                  command: "sudo -u postgres psql -c \"DROP ROLE IF EXISTS \"{{ POSTGRES_USER }}\";\""
                  when: user_check.stdout == '1'


            - name: Create user
              command: "sudo -u postgres psql -c \"CREATE USER \"{{ POSTGRES_USER }}\" WITH PASSWORD '{{ POSTGRES_PASSWORD }}' SUPERUSER;\""

            - name: Grant privileges to user on database
              command: "sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE {{ POSTGRES_DB }} TO \"{{ POSTGRES_USER }}\";\""




    - name: Execute init.sql
      command: "sudo -u postgres psql -d {{ POSTGRES_DB }} -f postgres/init.sql"


    - name: Stop PostgreSQL service
      service:
        name: "postgresql@{{ POSTGRES_VERSION }}-main"
        state: stopped

    - name: Backup PostgreSQL data directory after initialization
      command: "cp -r {{ PGDATA }} {{ BACKUP_DIR }}"

    - name: Start PostgreSQL service
      service:
        name: "postgresql@{{ POSTGRES_VERSION }}-main"
        state: started





  handlers:
    - name: Restart PostgreSQL
      service:
        name: "postgresql@{{ POSTGRES_VERSION }}-main"
        state: restarted
